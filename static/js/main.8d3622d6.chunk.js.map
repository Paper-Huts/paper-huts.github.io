{"version":3,"sources":["logo.svg","components/side_bar/side_bar.js","pages/about/about.js","pages/contact/contact.js","components/navigation/navigation.js","components/header/header.js","pages/landing/landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SideBar","motto1","className","to","src","logo","alt","About","props","Contact","Navigation","useState","id","title","path","fa_icon","faHome","faEdit","faPhone","navList","map","navItem","key","icon","Header","Landing","motto2","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6HAAAA,EAAOC,QAAU,IAA0B,kC,4TCmB5BC,G,YAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACd,yBAAKC,UAAU,YACb,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKC,IAAKC,IAAMH,UAAU,iBAAiBI,IAAI,WAGnD,yBAAKJ,UAAU,SACb,0BAAMA,UAAU,UAAUD,O,eCFjBM,G,YARD,SAAAC,GACZ,OACE,6BACE,4CCKSC,G,MARC,SAAAD,GACd,OACE,yBAAKN,UAAU,gBACb,6CCwBSQ,EArBI,WAAO,IAAD,EACOC,mBAAS,CACrC,CAAEC,GAAI,EAAGC,MAAO,OAAQC,KAAM,IAAKC,QAASC,KAC5C,CAAEJ,GAAI,EAAGC,MAAO,YAAaC,KAAM,SAAUC,QAASE,KACtD,CAAEL,GAAI,EAAGC,MAAO,UAAWC,KAAM,WAAYC,QAASG,OAJjC,mBAChBC,EADgB,UAOvB,OACE,yBAAKjB,UAAU,cACZiB,EAAQC,KAAI,SAAAC,GAAO,OAClB,kBAAC,IAAD,CAAMlB,GAAIkB,EAAQP,KAChBZ,UAAU,UACVoB,IAAKD,EAAQT,IACX,kBAAC,IAAD,CAAiBW,KAAMF,EAAQN,UAHnC,OAIKM,EAAQR,MAJb,WCROW,G,YARA,SAAC,GAAD,IAAGX,EAAH,EAAGA,MAAH,OACb,yBAAKX,UAAU,OACb,yBAAKA,UAAU,UACb,4BAAKW,OCaIY,EAdC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACJf,mBAAS,WADL,mBACvBE,EADuB,UAE9B,OACE,yBAAKX,UAAU,mBACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAQW,MAAOA,KAEjB,yBAAKX,UAAU,OACb,uBAAGA,UAAU,UAAUwB,MCiBhBC,MApBf,WAAgB,IAAD,EACehB,mBAAS,oBADxB,mBACNV,EADM,aAEeU,mBAAS,mBAFxB,mBAENe,EAFM,KAGb,OAHa,KAIX,6BACE,yBAAKxB,UAAU,SACb,kBAAC,EAAD,CAASD,OAAQA,KAEnB,yBAAKC,UAAU,sBACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0B,OAAK,EAACd,KAAK,KAAI,kBAAC,EAAD,CAASY,OAAQA,KACvC,kBAAC,IAAD,CAAOE,OAAK,EAACd,KAAK,SAASe,UAAWtB,IACtC,kBAAC,IAAD,CAAOqB,OAAK,EAACd,KAAK,WAAWe,UAAWpB,QCZ9BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d3622d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a1cbbcc3.svg\";","import React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport logo from '../../logo.svg'\r\nimport './side_bar.scss'\r\n\r\nconst SideBar = ({ motto1 }) => (\r\n  <div className='side-bar'>\r\n    <div className='row logo-space'>\r\n      <Link to='/'>\r\n        <img src={logo} className=\"paperhuts-logo\" alt=\"logo\" />\r\n      </Link>\r\n    </div>\r\n    <div className='motto'>\r\n      <span className='motto1'>{motto1}</span>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default SideBar","import React from 'react'\r\n\r\nimport './about.scss'\r\n\r\nconst About = props => {\r\n  return (\r\n    <div>\r\n      <h1>Our Story</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About","import React from 'react'\r\n\r\nimport './contact.scss'\r\n\r\nconst Contact = props => {\r\n  return (\r\n    <div className='contact-page'>\r\n      <h1>Contact Us</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Contact","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faEdit, faPhone } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './navigation.scss'\r\n\r\nimport About from '../../pages/about/about'\r\nimport Contact from '../../pages/contact/contact'\r\n\r\nconst Navigation = () => {\r\n  const [navList, setNavList] = useState([\r\n    { id: 0, title: 'Home', path: '/', fa_icon: faHome },\r\n    { id: 1, title: 'Our Story', path: '/about', fa_icon: faEdit },\r\n    { id: 2, title: 'Contact', path: '/contact', fa_icon: faPhone }\r\n  ])\r\n\r\n  return (\r\n    <div className='navigation'>\r\n      {navList.map(navItem => (\r\n        <Link to={navItem.path} \r\n          className='navItem' \r\n          key={navItem.id}>\r\n            <FontAwesomeIcon icon={navItem.fa_icon} />&nbsp;\r\n            {navItem.title} |\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\n\r\nimport './header.scss'\r\n\r\nconst Header = ({ title }) => (\r\n  <div className='row'>\r\n    <div className='header'>\r\n      <h1>{title}</h1>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Header","import React, { Fragment, useState } from 'react'\r\n\r\nimport './landing.scss'\r\n\r\nimport Header from '../../components/header/header'\r\n\r\nconst Landing = ({ motto2 }) => {\r\n  const [title, setTitle] = useState('Graphic')\r\n  return (\r\n    <div className='landing-section'>\r\n      <div className='row landing-header'>\r\n        <Header title={title} />\r\n      </div>\r\n      <div className='row'>\r\n        <p className='motto2'>{motto2}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Landing","import React, { Fragment, useState } from 'react'\r\nimport logo from './logo.svg'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport './App.scss';\r\n\r\nimport SideBar from './components/side_bar/side_bar'\r\nimport Navigation from './components/navigation/navigation'\r\nimport Landing from './pages/landing/landing'\r\nimport About from './pages/about/about'\r\nimport Contact from './pages/contact/contact'\r\n\r\nfunction App() {\r\n  const [motto1, setMotto1] = useState('Your next design')\r\n  const [motto2, setMotto2] = useState('starts with us')\r\n  return (\r\n    <div>\r\n      <div className='col-3'>\r\n        <SideBar motto1={motto1} />\r\n      </div>\r\n      <div className='col-9 main-section'>\r\n        <Navigation />\r\n        <Switch>\r\n          <Route exact path='/'><Landing motto2={motto2} /></Route>\r\n          <Route exact path='/about' component={About} />\r\n          <Route exact path='/contact' component={Contact} />\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter as Router } from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}